// testCourseApi.js
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function testPrisma() {
  try {
    // 1Ô∏è‚É£ T·∫°o kh√≥a h·ªçc m·ªõi
    const newCourse = await prisma.course.create({
      data: {
        title: "NodeJS Express",
        description: "Kh√≥a h·ªçc NodeJS Express c∆° b·∫£n",
        img: "https://example.com/node.png",
        url: "https://example.com/course/nodejs"
      }
    })
    console.log("‚úÖ Created:", newCourse)

    const courseId = newCourse.id

    // 2Ô∏è‚É£ L·∫•y t·∫•t c·∫£ kh√≥a h·ªçc
    const allCourses = await prisma.course.findMany()
    console.log("üìö All courses:", allCourses)

    // 3Ô∏è‚É£ L·∫•y kh√≥a h·ªçc theo ID
    const singleCourse = await prisma.course.findUnique({
      where: { id: courseId }
    })
    console.log("üîé Single course:", singleCourse)

    // 4Ô∏è‚É£ C·∫≠p nh·∫≠t kh√≥a h·ªçc
    const updatedCourse = await prisma.course.update({
      where: { id: courseId },
      data: {
        title: "NodeJS Express Updated",
        description: "Kh√≥a h·ªçc NodeJS Express n√¢ng cao",
        img: "https://example.com/node-advanced.png"
      }
    })
    console.log("‚úèÔ∏è Updated:", updatedCourse)

    // 5Ô∏è‚É£ X√≥a kh√≥a h·ªçc
    await prisma.course.delete({ where: { id: courseId } })
    console.log("üóëÔ∏è Deleted course", courseId)

  } catch (err) {
    console.error("‚ùå Error:", err.message)
  } finally {
    await prisma.$disconnect()
  }
}

testPrisma()
